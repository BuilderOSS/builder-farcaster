name: Deploy & Publish

env:
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  REMOTE_HOST_NAME: ${{ secrets.REMOTE_HOST_NAME }}
  REMOTE_HOST_USER: ${{ secrets.REMOTE_HOST_USER }}
  REMOTE_HOST_PATH: ${{ secrets.REMOTE_HOST_PATH }}
  REMOTE_HOST_NODE: ${{ secrets.REMOTE_HOST_NODE }}
  REMOTE_HOST_PNPM: ${{ secrets.REMOTE_HOST_PNPM }}
  CURRENT_REFERENCE: ${{ github.ref_name }}

on:
  release:
    types: [published]

jobs:
  # Prepare and publish
  deploy:
    name: Deploy to Workers
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v4.2.1
        with:
          ref: ${{ github.event.release.tag_name }}

      - name: Setup Node.js Environment
        uses: actions/setup-node@v4.0.4
        with:
          node-version: ^20

      - name: Install PNPM package manager
        uses: pnpm/action-setup@v4.0.0
        with:
          version: ^9
          run_install: false

      - name: Capture pnpm store directory
        id: pnpm-cache
        run: |
          echo "pnpm_cache_dir=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Cache pnpm Store
        uses: actions/cache@v4.1.1
        with:
          path: ${{ steps.pnpm-cache.outputs.pnpm_cache_dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Create env file from secrets
        run: |
          cat <<EOF > .env
          NODE_ENV=${{ secrets.NODE_ENV }}
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          BUILDER_SUBGRAPH_ETHEREUM_URL=${{ secrets.BUILDER_SUBGRAPH_ETHEREUM_URL }}
          BUILDER_SUBGRAPH_BASE_URL=${{ secrets.BUILDER_SUBGRAPH_BASE_URL }}
          BUILDER_SUBGRAPH_OPTIMISM_URL=${{ secrets.BUILDER_SUBGRAPH_OPTIMISM_URL }}
          BUILDER_SUBGRAPH_ZORA_URL=${{ secrets.BUILDER_SUBGRAPH_ZORA_URL }}
          WARPCAST_BASE_URL=${{ secrets.WARPCAST_BASE_URL }}
          WARPCAST_API_KEY=${{ secrets.WARPCAST_API_KEY }}
          WARPCAST_ACCESS_TOKEN=${{ secrets.WARPCAST_ACCESS_TOKEN }}
          EOF

      - name: Install dependencies
        run: pnpm install

      - name: Build the application
        run: pnpm run build

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to Server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ env.REMOTE_HOST_USER }}@${{ env.REMOTE_HOST_NAME }} <<EOF
            mkdir -pv ${{ env.REMOTE_HOST_PATH }}~${{ env.CURRENT_REFERENCE }}
            mkdir -pv ${{ env.REMOTE_HOST_PATH }}~${{ env.CURRENT_REFERENCE }}/logs
          EOF

          rsync -avz --delete \
            --include='dist/***' \
            --include='prisma/***' \
            --include='.env' \
            --include='package.json' \
            --include='pnpm-lock.yaml' \
            --include='LICENSE' \
            --exclude='*' \
            ./ \
            ${{ env.REMOTE_HOST_USER }}@${{ env.REMOTE_HOST_NAME }}:${{ env.REMOTE_HOST_PATH }}~${{ env.CURRENT_REFERENCE }}

      - name: Install Dependencies on Server
        run: |
          ssh ${{ env.REMOTE_HOST_USER }}@${{ env.REMOTE_HOST_NAME }} << EOF
            cd ${{ env.REMOTE_HOST_PATH }}~${{ env.CURRENT_REFERENCE }}
            ${{ env.REMOTE_HOST_NODE }} --version
            ${{ env.REMOTE_HOST_PNPM }} install --prod
            ${{ env.REMOTE_HOST_PNPM }} prisma migrate deploy
            ${{ env.REMOTE_HOST_PNPM }} prisma generate
          EOF

      - name: Replace with current
        run: |
          ssh ${{ env.REMOTE_HOST_USER }}@${{ env.REMOTE_HOST_NAME }} <<EOF
            rm -fv ${{ env.REMOTE_HOST_PATH }}
            ln -sv ${{ env.REMOTE_HOST_PATH }}~${{ env.CURRENT_REFERENCE }} ${{ env.REMOTE_HOST_PATH }}
          EOF

      - name: Set up crontab tasks
        run: |
          ssh ${{ env.REMOTE_HOST_USER }}@${{ env.REMOTE_HOST_NAME }} <<EOF
            crontab -r
            echo "0 * * * * cd ${{ env.REMOTE_HOST_PATH }} && ${{ env.REMOTE_HOST_NODE }} dist/index.js process proposals >> logs/process_proposals.log 2>&1" >> cron_jobs.txt
            echo "* * * * * cd ${{ env.REMOTE_HOST_PATH }} && ${{ env.REMOTE_HOST_NODE }} dist/index.js queues consume -l 10 >> logs/consume_queues.log 2>&1" >> cron_jobs.txt
            crontab cron_jobs.txt
            rm -f cron_jobs.txt
          EOF

concurrency:
  group: ${{ github.workflow }}-${{ github.run_id }}
  cancel-in-progress: true
