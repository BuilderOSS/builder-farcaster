name: Deploy & Publish

env:
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  REMOTE_HOST_NAME: ${{ secrets.REMOTE_HOST_NAME }}
  REMOTE_HOST_USER: ${{ secrets.REMOTE_HOST_USER }}
  REMOTE_HOST_PATH: ${{ secrets.REMOTE_HOST_PATH }}
  REMOTE_HOST_NODE: ${{ secrets.REMOTE_HOST_NODE }}
  REMOTE_HOST_PNPM: ${{ secrets.REMOTE_HOST_PNPM }}
  CURRENT_REFERENCE: ${{ github.ref_name }}

on:
  release:
    types: [published]

jobs:
  deploy:
    name: Deploy to Workers
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v4.2.1
        with:
          ref: ${{ github.event.release.tag_name }} # Checkout the specific release tag

      # Set up Node.js and PNPM environment
      - name: Setup Node.js
        uses: actions/setup-node@v4.0.4
        with:
          node-version: ^20 # Use Node.js version 20 or above to ensure compatibility with the project

      - name: Setup PNPM
        uses: pnpm/action-setup@v4.0.0
        with:
          version: ^9 # Use PNPM version 9 or above
          run_install: false # Disable automatic installation to customize the installation process

      # Cache the PNPM store to speed up dependency installation
      - name: Cache PNPM Store
        id: pnpm-cache
        uses: actions/cache@v4.1.1
        with:
          path: $(pnpm store path) # Cache the PNPM store directory
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }} # Unique cache key based on OS and lock file
          restore-keys: |
            ${{ runner.os }}-pnpm-store- # Restore cache if an exact match is not found

      # Create .env file from GitHub secrets to use in the project
      - name: Create .env File
        run: |
          cat <<EOF > .env
          NODE_ENV=${{ secrets.NODE_ENV }}
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          BUILDER_SUBGRAPH_ETHEREUM_URL=${{ secrets.BUILDER_SUBGRAPH_ETHEREUM_URL }}
          BUILDER_SUBGRAPH_BASE_URL=${{ secrets.BUILDER_SUBGRAPH_BASE_URL }}
          BUILDER_SUBGRAPH_OPTIMISM_URL=${{ secrets.BUILDER_SUBGRAPH_OPTIMISM_URL }}
          BUILDER_SUBGRAPH_ZORA_URL=${{ secrets.BUILDER_SUBGRAPH_ZORA_URL }}
          WARPCAST_BASE_URL=${{ secrets.WARPCAST_BASE_URL }}
          WARPCAST_API_KEY=${{ secrets.WARPCAST_API_KEY }}
          WARPCAST_ACCESS_TOKEN=${{ secrets.WARPCAST_ACCESS_TOKEN }}
          EOF # Generate the .env file with necessary environment variables

      # Install dependencies using PNPM
      - name: Install Dependencies
        run: pnpm install # Install project dependencies

      # Build the application
      - name: Build Application
        run: pnpm build # Compile the application for deployment

      # Set up SSH agent for secure connection to the server
      - name: Set Up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }} # Use the SSH private key from GitHub secrets for authentication

      # Deploy the application to the remote server
      - name: Deploy to Server
        run: |
          # Create a new directory for the current release on the server
          ssh -tt -o StrictHostKeyChecking=no ${{ env.REMOTE_HOST_USER }}@${{ env.REMOTE_HOST_NAME }} <<EOF
            mkdir -pv ${{ env.REMOTE_HOST_PATH }}~${{ env.CURRENT_REFERENCE }}
            mkdir -pv ${{ env.REMOTE_HOST_PATH }}~${{ env.CURRENT_REFERENCE }}/logs
          EOF

          # Synchronize files to the remote server using rsync
          rsync -avz --delete \
            --include='dist/***' \
            --include='prisma/***' \
            --exclude='prisma/*.db*' \
            --include='.env' \
            --include='package.json' \
            --include='pnpm-lock.yaml' \
            --include='LICENSE' \
            --exclude='*' \
            ./ \
            ${{ env.REMOTE_HOST_USER }}@${{ env.REMOTE_HOST_NAME }}:${{ env.REMOTE_HOST_PATH }}~${{ env.CURRENT_REFERENCE }}

      # Install dependencies on the server and run Prisma migrations
      - name: Install Server Dependencies
        run: |
          ssh -tt ${{ env.REMOTE_HOST_USER }}@${{ env.REMOTE_HOST_NAME }} <<EOF
            cd ${{ env.REMOTE_HOST_PATH }}~${{ env.CURRENT_REFERENCE }}
            ${{ env.REMOTE_HOST_NODE }} --version # Verify Node.js version on the server
            ${{ env.REMOTE_HOST_PNPM }} install --prod # Install production dependencies only
            ${{ env.REMOTE_HOST_PNPM }} prisma migrate deploy # Run database migrations
            ${{ env.REMOTE_HOST_PNPM }} prisma generate # Generate Prisma client
          EOF

      # Update the current release symlink to point to the new release
      - name: Update Current Release
        run: |
          ssh -tt ${{ env.REMOTE_HOST_USER }}@${{ env.REMOTE_HOST_NAME }} <<EOF
            rm -fv ${{ env.REMOTE_HOST_PATH }} # Remove the existing symlink
            ln -sv ${{ env.REMOTE_HOST_PATH }}~${{ env.CURRENT_REFERENCE }} ${{ env.REMOTE_HOST_PATH }} # Create a new symlink to the current release
          EOF

      # Set up crontab tasks for background processes
      - name: Set Up Crontab Tasks
        run: |
          ssh -tt ${{ env.REMOTE_HOST_USER }}@${{ env.REMOTE_HOST_NAME }} <<EOF
            crontab -r # Remove existing crontab tasks
            # Add a crontab task to process proposals every hour
            echo "0 * * * * cd ${{ env.REMOTE_HOST_PATH }} && ${{ env.REMOTE_HOST_NODE }} dist/index.js process proposals >> logs/process_proposals.log 2>&1" >> cron_jobs.txt
            # Add a crontab task to consume queues every minute
            echo "* * * * * cd ${{ env.REMOTE_HOST_PATH }} && ${{ env.REMOTE_HOST_NODE }} dist/index.js queues consume -l 10 >> logs/consume_queues.log 2>&1" >> cron_jobs.txt
            crontab cron_jobs.txt # Update crontab with new tasks
            rm -f cron_jobs.txt # Remove temporary crontab file
          EOF

concurrency:
  group: ${{ github.workflow }}-${{ github.run_id }} # Ensure only one deployment is running per workflow
  cancel-in-progress: true # Cancel any ongoing workflow if a new one starts
