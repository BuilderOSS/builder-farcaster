name: Deploy & Publish

env:
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  REMOTE_HOST_NAME: ${{ vars.REMOTE_HOST_NAME }}
  REMOTE_HOST_USER: ${{ vars.REMOTE_HOST_USER }}
  REMOTE_HOST_PATH: ${{ vars.REMOTE_HOST_PATH }}
  REMOTE_HOST_NODE: ${{ vars.REMOTE_HOST_NODE }}
  REMOTE_HOST_PNPM: ${{ vars.REMOTE_HOST_PNPM }}
  CURRENT_REFERENCE: ${{ github.ref_name }}

on:
  release:
    types: [published]

jobs:
  deploy:
    name: Deploy to Workers
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v4.2.2
        with:
          ref: ${{ github.event.release.tag_name }}

      # Set up Node.js and PNPM environment
      - name: Setup Node.js
        uses: actions/setup-node@v4.1.0
        with:
          node-version: '20.x' # Ensure compatibility

      - name: Setup PNPM
        uses: pnpm/action-setup@v4.0.0
        with:
          version: '9.x'
          run_install: false

      # Cache the PNPM store to speed up dependency installation
      - name: Cache PNPM Store
        id: pnpm-cache
        uses: actions/cache@v4.1.2
        with:
          path: $(pnpm store path)
          key: pnpm-store-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-store-${{ runner.os }}-

      # Create .env file from GitHub secrets to use in the project
      - name: Create .env File
        run: |
          cat <<EOF > .env
          NODE_ENV=${{ secrets.NODE_ENV }}
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          BUILDER_SUBGRAPH_ETHEREUM_URL=${{ secrets.BUILDER_SUBGRAPH_ETHEREUM_URL }}
          BUILDER_SUBGRAPH_BASE_URL=${{ secrets.BUILDER_SUBGRAPH_BASE_URL }}
          BUILDER_SUBGRAPH_OPTIMISM_URL=${{ secrets.BUILDER_SUBGRAPH_OPTIMISM_URL }}
          BUILDER_SUBGRAPH_ZORA_URL=${{ secrets.BUILDER_SUBGRAPH_ZORA_URL }}
          WARPCAST_BASE_URL=${{ secrets.WARPCAST_BASE_URL }}
          WARPCAST_API_KEY=${{ secrets.WARPCAST_API_KEY }}
          WARPCAST_ACCESS_TOKEN=${{ secrets.WARPCAST_ACCESS_TOKEN }}
          EOF

      # Install dependencies using PNPM
      - name: Install Dependencies
        run: pnpm install --frozen-lockfile # Ensures only exact lock file versions are used

      # Build the application
      - name: Build Application
        run: pnpm build

      # Set up SSH agent for secure connection to the server
      - name: Set Up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # Deploy the application to the remote server
      - name: Deploy to Server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ env.REMOTE_HOST_USER }}@${{ env.REMOTE_HOST_NAME }} <<EOF
            mkdir -pv ${{ env.REMOTE_HOST_PATH }}~${{ env.CURRENT_REFERENCE }}/logs
          EOF

          # Remove SQLite database files
          rm -f prisma/*.db prisma/*.db-journal

          # Synchronize files to the remote server using rsync
          rsync -avz --delete \
            --include='dist/***' \
            --include='prisma/***' \
            --include='.env' \
            --include='package.json' \
            --include='pnpm-lock.yaml' \
            --include='LICENSE' \
            --exclude='*' \
            ./ \
            ${{ env.REMOTE_HOST_USER }}@${{ env.REMOTE_HOST_NAME }}:${{ env.REMOTE_HOST_PATH }}~${{ env.CURRENT_REFERENCE }}

      # Install dependencies on the server and run Prisma migrations
      - name: Install Server Dependencies
        run: |
          ssh ${{ env.REMOTE_HOST_USER }}@${{ env.REMOTE_HOST_NAME }} <<EOF
            cp -av ${{ env.REMOTE_HOST_PATH }}/prisma/{*.db,*.db-journal} \
              ${{ env.REMOTE_HOST_PATH }}~${{ env.CURRENT_REFERENCE }}/prisma/

            cd ${{ env.REMOTE_HOST_PATH }}~${{ env.CURRENT_REFERENCE }}
            ${{ env.REMOTE_HOST_NODE }} --version
            ${{ env.REMOTE_HOST_PNPM }} install --prod
            ${{ env.REMOTE_HOST_PNPM }} prisma migrate deploy
            ${{ env.REMOTE_HOST_PNPM }} prisma generate
          EOF

      # Update the current release symlink to point to the new release
      - name: Update Current Release
        run: |
          ssh ${{ env.REMOTE_HOST_USER }}@${{ env.REMOTE_HOST_NAME }} <<EOF
            ln -sfn ${{ env.REMOTE_HOST_PATH }}~${{ env.CURRENT_REFERENCE }} ${{ env.REMOTE_HOST_PATH }} # Create or update the symlink atomically
          EOF

      # Set up crontab tasks for background processes
      - name: Set Up Crontab Tasks
        run: |
          ssh ${{ env.REMOTE_HOST_USER }}@${{ env.REMOTE_HOST_NAME }} <<EOF
            crontab -r # Remove existing crontab tasks
            # Add crontab tasks to process proposals and consume queues
            echo "0 * * * * cd ${{ env.REMOTE_HOST_PATH }} && ${{ env.REMOTE_HOST_NODE }} dist/index.js process proposals >> logs/process_proposals.log 2>&1" >> cron_jobs.txt
            echo "* * * * * cd ${{ env.REMOTE_HOST_PATH }} && ${{ env.REMOTE_HOST_NODE }} dist/index.js queues consume -l 10 >> logs/consume_queues.log 2>&1" >> cron_jobs.txt
            crontab cron_jobs.txt
            rm -f cron_jobs.txt
          EOF

concurrency:
  group: ${{ github.workflow }}-${{ github.run_id }}
  cancel-in-progress: true
